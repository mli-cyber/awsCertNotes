Infrastructure as a Service (IaaS)
• Provide building blocks for cloud IT
• Provides networking, computers, data storage space
• Highest level of flexibility
• Easy parallel with traditional on-premises IT
Platform as a Service (PaaS)
• Removes the need for your organization to manage the underlying infrastructure
• Focus on the deployment and management of your applications
Software as a Service (SaaS)
• Completed product that is run and managed by the service provider

				|On-premises| IaaS 	| PaaS	| SaaS	|	
----------------|-----------|-------|-------|-------|
Applications	|		x	|	x	|	x	|		|
Data			|		x	|	x	|	x	|		|
Runtime			|		x	|	x	|		|		|
Middleware		|		x	|	x	|		|		|
O/S				|		x	|	x	|		|		|
Virtualization	|		x	|		|		|		|
Servers			|		x	|		|		|		|
Storage			|		x	|		|		|		|
Networking		|		x	|		|		|		|

IaaS: Amazon C2, GCP, Azure, Rackspae, Digital Ocean, Linode
PaaS: Elastic Beanstalk, Heroku, Google App Engine (GCP), Windows Azure
SaaS: Rekognition (for machineLearning), Google Apps, Dropbox, Zoom

-------------------------------------------------------------------
IAM = Identity and Access Management, Global service
-------------------------------------------------------------------

IAM: Users & Groups
• IAM = Identity and Access Management, Global service
• Root account created by default, shouldn’t be used or shared
• Users are people within your organization, and can be grouped
• Groups only contain users, not other groups
• Users don’t have to belong to a group, and user can belong to multiple groups


IAM Policies Structure
• Version: policy language version, always include “2012-10-17”
• Id: an identifier for the policy (optional)
• Statement: one or more individual statements (required)
• Statements consists of
• Sid: an identifier for the statement (optional)
• Effect: whether the statement allows or denies access (Allow, Deny)
• Principal: account/user/role to which this policy applied to
• Action: list of actions this policy allows or denies
• Resource: list of resources to which the actions applied to
• Condition: conditions for when this policy is in effect (optional)

• To access AWS, you have three options:
	• AWS Management Console (protected by password + MFA)
	• AWS Command Line Interface (CLI): protected by access keys
	• AWS Software Developer Kit (SDK) - for code: protected by access keys
• Access Keys are generated through the AWS Console
• Users manage their own access keys

https://github.com/aws/aws-cli

• AWS Software Development Kit (AWS SDK)
• Language-specific APIs (set of libraries)
• Enables you to access and manage AWS services programmatically
• Embedded within your application
• Supports
	• SDKs (JavaScript, Python, PHP, .NET, Ruby, Java, Go, Node.js, C++)
	• Mobile SDKs (Android, iOS, …)
	• IoT Device SDKs (Embedded C, Arduino, …)
• Example: AWS CLI is built on AWS SDK for Python

IAM Roles for Services
• Some AWS service will need to perform actions on your behalf
• To do so, we will assign
	permissions to AWS services with IAM Roles
• Common roles:
	• EC2 Instance Roles
	• Lambda Function Roles
	• Roles for CloudFormation.
	
IAM Guidelines & Best Practices
	• Don’t use the root account except for AWS account setup
	• One physical user = One AWS user
	• Assign users to groups and assign permissions to groups
	• Create a strong password policy
	• Use and enforce the use of Multi Factor Authentication (MFA)
	• Create and use Roles for giving permissions to AWS services
	• Use Access Keys for Programmatic Access (CLI / SDK)
	• Audit permissions of your account with the IAM Credentials Report
	• Never share IAM users & Access Keys
	
Shared Responsibility Model for IAM
AWS
• Infrastructure (global network security)
• Configuration and vulnerability analysis
• Compliance validation 
You
• Users, Groups, Roles, Policies management and monitoring
• Enable MFA on all accounts
• Rotate all your keys often
• Use IAM tools to apply appropriate permissions
• Analyze access patterns & review permissions

IAM Section – Summary
• Users: mapped to a physical user, has a password for AWS Console
• Groups: contains users only
• Policies: JSON document that outlines permissions for users or groups
• Roles: for EC2 instances or AWS services
• Security: MFA + Password Policy
• AWS CLI: manage your AWS services using the command-line
• AWS SDK: manage your AWS services using a programming language
• Access Keys: access AWS using the CLI or SDK
• Audit: IAM Credential Reports & IAM Access Advisor

-------------------------------------------------------------------
SC2
-------------------------------------------------------------------