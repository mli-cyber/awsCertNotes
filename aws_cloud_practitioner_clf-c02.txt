Infrastructure as a Service (IaaS)
• Provide building blocks for cloud IT
• Provides networking, computers, data storage space
• Highest level of flexibility
• Easy parallel with traditional on-premises IT
Platform as a Service (PaaS)
• Removes the need for your organization to manage the underlying infrastructure
• Focus on the deployment and management of your applications
Software as a Service (SaaS)
• Completed product that is run and managed by the service provider

				|On-premises| IaaS 	| PaaS	| SaaS	|	
----------------|-----------|-------|-------|-------|
Applications	|		x	|	x	|	x	|		|
Data			|		x	|	x	|	x	|		|
Runtime			|		x	|	x	|		|		|
Middleware		|		x	|	x	|		|		|
O/S				|		x	|	x	|		|		|
Virtualization	|		x	|		|		|		|
Servers			|		x	|		|		|		|
Storage			|		x	|		|		|		|
Networking		|		x	|		|		|		|

IaaS: Amazon C2, GCP, Azure, Rackspae, Digital Ocean, Linode
PaaS: Elastic Beanstalk, Heroku, Google App Engine (GCP), Windows Azure
SaaS: Rekognition (for machineLearning), Google Apps, Dropbox, Zoom

-------------------------------------------------------------------
IAM = Identity and Access Management, Global service
-------------------------------------------------------------------

IAM: Users & Groups
• IAM = Identity and Access Management, Global service
• Root account created by default, shouldn’t be used or shared
• Users are people within your organization, and can be grouped
• Groups only contain users, not other groups
• Users don’t have to belong to a group, and user can belong to multiple groups


IAM Policies Structure
• Version: policy language version, always include “2012-10-17”
• Id: an identifier for the policy (optional)
• Statement: one or more individual statements (required)
• Statements consists of
• Sid: an identifier for the statement (optional)
• Effect: whether the statement allows or denies access (Allow, Deny)
• Principal: account/user/role to which this policy applied to
• Action: list of actions this policy allows or denies
• Resource: list of resources to which the actions applied to
• Condition: conditions for when this policy is in effect (optional)

• To access AWS, you have three options:
	• AWS Management Console (protected by password + MFA)
	• AWS Command Line Interface (CLI): protected by access keys
	• AWS Software Developer Kit (SDK) - for code: protected by access keys
• Access Keys are generated through the AWS Console
• Users manage their own access keys

https://github.com/aws/aws-cli

• AWS Software Development Kit (AWS SDK)
• Language-specific APIs (set of libraries)
• Enables you to access and manage AWS services programmatically
• Embedded within your application
• Supports
	• SDKs (JavaScript, Python, PHP, .NET, Ruby, Java, Go, Node.js, C++)
	• Mobile SDKs (Android, iOS, …)
	• IoT Device SDKs (Embedded C, Arduino, …)
• Example: AWS CLI is built on AWS SDK for Python

IAM Roles for Services
• Some AWS service will need to perform actions on your behalf
• To do so, we will assign
	permissions to AWS services with IAM Roles
• Common roles:
	• EC2 Instance Roles
	• Lambda Function Roles
	• Roles for CloudFormation.
	
IAM Guidelines & Best Practices
	• Don’t use the root account except for AWS account setup
	• One physical user = One AWS user
	• Assign users to groups and assign permissions to groups
	• Create a strong password policy
	• Use and enforce the use of Multi Factor Authentication (MFA)
	• Create and use Roles for giving permissions to AWS services
	• Use Access Keys for Programmatic Access (CLI / SDK)
	• Audit permissions of your account with the IAM Credentials Report
	• Never share IAM users & Access Keys
	
Shared Responsibility Model for IAM
AWS
• Infrastructure (global network security)
• Configuration and vulnerability analysis
• Compliance validation 
You
• Users, Groups, Roles, Policies management and monitoring
• Enable MFA on all accounts
• Rotate all your keys often
• Use IAM tools to apply appropriate permissions
• Analyze access patterns & review permissions

IAM Section – Summary
• Users: mapped to a physical user, has a password for AWS Console
• Groups: contains users only
• Policies: JSON document that outlines permissions for users or groups
• Roles: for EC2 instances or AWS services
• Security: MFA + Password Policy
• AWS CLI: manage your AWS services using the command-line
• AWS SDK: manage your AWS services using a programming language
• Access Keys: access AWS using the CLI or SDK
• Audit: IAM Credential Reports & IAM Access Advisor

-------------------------------------------------------------------
EC2 = Elastic Compute Cloud = Infrastructure as a Service
-------------------------------------------------------------------

It mainly consists in the capability of :
	• Renting virtual machines (EC2)
	• Storing data on virtual drives (EBS)
	• Distributing load across machines (ELB)
	• Scaling the services using an auto-scaling group (ASG)
	
• Operating System (OS): Linux, Windows or Mac OS
• How much compute power & cores (CPU)
• How much random-access memory (RAM)
• How much storage space:
• Network-attached (EBS & EFS)
• hardware (EC2 Instance Store)
• Network card: speed of the card, Public IP address
• Firewall rules: security group
• Bootstrap script (configure at first launch): EC2 User Data

EC2 user data is used to automate boot tasks such as:
• Installing updates
• Installing software
• Downloading common files from the internet
• Anything you can think of

EC2 Instances Purchasing Options
	• On-Demand Instances – short workload, predictable pricing, pay by second
	• Reserved (1 & 3 years)
	• Reserved Instances – long workloads
	• Convertible Reserved Instances – long workloads with flexible instances
	• Savings Plans (1 & 3 years) –commitment to an amount of usage, long workload
	• Spot Instances – short workloads, cheap, can lose instances (less reliable)
	• Dedicated Hosts – book an entire physical server, control instance placement
	• Dedicated Instances – no other customers will share your hardware
	• Capacity Reservations – reserve capacity in a specific AZ for any duration
	
Shared Responsibility Model for EC2
AWS
	• Infrastructure (global network security)
	• Isolation on physical hosts
	• Replacing faulty hardware
	• Compliance validation
User
	• Security Groups rules
	• Operating-system patches and updates
	• Software and utilities installed on the EC2 instance
	• IAM Roles assigned to EC2 & IAM user access management
	• Data security on your instance
	
EC2 Section – Summary
	• EC2 Instance: AMI (OS) + Instance Size (CPU + RAM) + Storage + security groups + EC2 User Data
	• Security Groups: Firewall attached to the EC2 instance
	• EC2 User Data: Script launched at the first start of an instance
	• SSH: start a terminal into our EC2 Instances (port 22)
	• EC2 Instance Role: link to IAM roles
	• Purchasing Options: On-Demand, Spot, Reserved (Standard + Convertible + Scheduled), Dedicated Host, Dedicated Instance
	
-------------------------------------------------------------------
EC2 Instance Storage Section
-------------------------------------------------------------------	

EBS (Elastic Block Store)

EBS Volume
• It’s a network drive (i.e. not a physical drive)
• It uses the network to communicate the instance, which means there might be a bit of latency
• It can be detached from an EC2 instance and attached to another one quickly
• It’s locked to an Availability Zone (AZ)
• An EBS Volume in us-east-1a cannot be attached to us-east-1b
• To move a volume across, you first need to snapshot it
• Have a provisioned capacity (size in GBs, and IOPS)
• You get billed for all the provisioned capacity
• You can increase the capacity of the drive over time

EBS Snapshots
• Make a backup (snapshot) of your EBS volume at a point in time
• Not necessary to detach volume to do snapshot, but recommended
• Can copy snapshots across AZ or Region

AMI = Amazon Machine Image

AMI Process (from an EC2 instance)
• Start an EC2 instance and customize it
• Stop the instance (for data integrity)
• Build an AMI – this will also create EBS snapshots
• Launch instances from other AMIs

EC2 Image Builder
• Used to automate the creation of Virtual Machines or container images
• => Automate the creation, maintain, validate and test EC2 AMIs
• Free service (only pay for the underlying resources)

EC2 Instance Store
• EBS volumes are network drives with good but “limited” performance
• If you need a high-performance hardware disk, use EC2 Instance Store
• Better I/O performance
• EC2 Instance Store lose their storage if they’re stopped (ephemeral)
• Good for buffer / cache / scratch data / temporary content
• Risk of data loss if hardware fails
• Backups and Replication are your responsibility

EFS – Elastic File System

• Managed NFS (network file system) that can be mounted on 100s of EC2
• EFS works with Linux EC2 instances in multi-AZ
• Highly available, scalable, expensive (3x gp2), pay per use, no capacity planning

EFS Infrequent Access (EFS-IA)
• Storage class that is cost-optimized for files not accessed every day
• Up to 92% lower cost compared to EFS Standard
• EFS will automatically move your files to EFS-IA based on the last time they were accessed
• Enable EFS-IA with a Lifecycle Policy
• Example: move files that are not accessed for 60 days to EFS-IA
• Transparent to the applications accessing EFS

Shared Responsibility Model for EC2 Storage
AWS
• Infrastructure
• Replication for data for EBS volumes & EFS drives
• Replacing faulty hardware
• Ensuring their employees cannot access your data
User
• Setting up backup / snapshot procedures
• Setting up data encryption
• Responsibility of any data on the drives
• Understanding the risk of using EC2 Instance Store

Amazon FSx – Overview
• Launch 3rd party high-performance file systems on AWS
• Fully managed service

Amazon FSx for Windows File Server
• Built on Windows File Server
• Supports SMB protocol & Windows NTFS
• Integrated with Microsoft Active Directory
• Can be accessed from AWS or your on-premise infrastructure

Amazon FSx for Lustre
• A fully managed, high-performance, scalable file storage for High Performance Computing (HPC)
• The name Lustre is derived from “Linux” and “cluster”
• Machine Learning, Analytics, Video Processing, Financial Modeling, …
• Scales up to 100s GB/s, millions of IOPS, sub-ms latencies

EC2 Instance Storage - Summary
• EBS volumes:
• network drives attached to one EC2 instance at a time
• Mapped to an Availability Zones
• Can use EBS Snapshots for backups / transferring EBS volumes across AZ
• AMI: create ready-to-use EC2 instances with our customizations
• EC2 Image Builder: automatically build, test and distribute AMIs
• EC2 Instance Store:
• High performance hardware disk attached to our EC2 instance
• Lost if our instance is stopped / terminated
• EFS: network file system, can be attached to 100s of instances in a region
• EFS-IA: cost-optimized storage class for infrequent accessed files
• FSx for Windows: Network File System for Windows servers
• FSx for Lustre: High Performance Computing Linux file system

-------------------------------------------------------------------
Elastic Load Balancing & Auto Scaling Groups Section
-------------------------------------------------------------------
Vertical Scalability - increasing the size of the instance
Vertical scalability is very common for nondistributed systems, such as a database.
There’s usually a limit to how much you can vertically scale (hardware limit)

Horizontal Scalability - increasing the number of instances / systems for your application
Horizontal scaling implies distributed systems, very common for web applications / modern applications Amazon EC2

High Availability -running your application / system in at least 2 Availability Zones
high availab

High Availability & Scalability For EC2
• Vertical Scaling: Increase instance size (= scale up / down)
	• From: t2.nano - 0.5G of RAM, 1 vCPU
	• To: u-12tb1.metal – 12.3 TB of RAM, 448 vCPUs
• Horizontal Scaling: Increase number of instances (= scale out / in)
	• Auto Scaling Group
	• Load Balancer
• High Availability: Run instances for the same application across multi AZ
	• Auto Scaling Group multi AZ
	• Load Balancer multi AZ

• Scalability: ability to accommodate a larger load by making the hardware stronger (scale up), or by adding nodes (scale out)
• Elasticity: once a system is scalable, elasticity means that there will be some “auto-scaling” so that the system can scale based on the load. This
is “cloud-friendly”: pay-per-use, match demand, optimize costs
• Agility: (not related to scalability - distractor) new IT resources are only a click away, which means that you reduce the time to make those resources available to your developers from weeks to just minutes.

Load balancers are servers that forward internet traffic to multiple servers (EC2 Instances) downstream

• Spread load across multiple downstream instances
• Expose a single point of access (DNS) to your application
• Seamlessly handle failures of downstream instances
• Do regular health checks to your instances
• Provide SSL termination (HTTPS) for your websites
• High availability across zones

An ELB (Elastic Load Balancer) is a managed load balancer
• AWS guarantees that it will be working
• AWS takes care of upgrades, maintenance, high availability
• AWS provides only a few configuration knobs

It costs less to setup your own load balancer but it will be a lot more
effort on your end (maintenance, integrations)

4 kinds of load balancers offered by AWS:
	• Application Load Balancer (HTTP / HTTPS only) – Layer 7
	• Network Load Balancer (ultra-high performance, allows for TCP) – Layer 4
	• Gateway Load Balancer – Layer 3

Application Load Balancer
• HTTP / HTTPS / gRPC protocols (Layer 7)
• HTTP Routing features
• Static DNS (URL)

Network Load Balancer
• TCP / UDP protocols (Layer 4)
• High Performance: millions of request per seconds
• Static IP through Elastic IP

Gateway Load Balancer
• GENEVE Protocol on IP Packets (Layer 3)
• Route Traffic to Firewalls that you manage on EC2 Instances
• Intrusion detection

Auto Scaling Group
• Scale out (add EC2 instances) to match an increased load
• Scale in (remove EC2 instances) to match a decreased load
• Ensure we have a minimum and a maximum number of machines running
• Automatically register new instances to a load balancer
• Replace unhealthy instances
Scaling Strategies
• Manual Scaling: Update the size of an ASG manually
• Dynamic Scaling: Respond to changing demand
	• Simple / Step Scaling
		• When a CloudWatch alarm is triggered (example CPU > 70%), then add 2 units
		• When a CloudWatch alarm is triggered (example CPU < 30%), then remove 1
	• Target Tracking Scaling
		• Example: I want the average ASG CPU to stay at around 40%
	• Scheduled Scaling
		• Anticipate a scaling based on known usage patterns
		• Example: increase the min. capacity to 10 at 5 pm on Fridays
• Predictive Scaling
	• Uses Machine Learning to predict future traffic ahead of time
	• Automatically provisions the right number of EC2 instances in advance
	• Useful when your load has predictable timebased patterns


ELB & ASG – Summary
• High Availability vs Scalability (vertical and horizontal) vs Elasticity vs Agility in the Cloud
• Elastic Load Balancers (ELB)
	• Distribute traffic across backend EC2 instances, can be Multi-AZ
	• Supports health checks
	• 4 types: Classic (old), Application (HTTP – L7), Network (TCP – L4), Gateway (L3)
• Auto Scaling Groups (ASG)
	• Implement Elasticity for your application, across multiple AZ
	• Scale EC2 instances based on the demand on your system, replace unhealthy
	• Integrated with the ELB
	
-------------------------------------------------------------------
Amazon S3 Section
-------------------------------------------------------------------
• Backup and storage
• Disaster Recovery
• Archive
• Hybrid Cloud storage
• Application hosting
• Media hosting
• Data lakes & big data analytics
• Software delivery
• Static website

Amazon S3 - Buckets
• “buckets” (directories)
• Buckets must have a globally unique name (across all regions all accounts)
• S3 looks like a global service but buckets are created in a region
• Naming convention
	• No uppercase, No underscore
	• 3-63 characters long
	• Not an IP
	• Must start with lowercase letter or number
	• Must NOT start with the prefix xn--
	• Must NOT end with the suffix -s3alias
	
Amazon S3 - Objects
• Objects (files) have a Key
• The key is the FULL path:
	• s3://my-bucket/my_file.txt
	• s3://my-bucket/my_folder1/another_folder/my_file.txt
• The key is composed of prefix + object name
	• s3://my-bucket/my_folder1/another_folder/my_file.txt
• There’s no concept of “directories” within buckets (although the UI will trick you to think otherwise)
• Just keys with very long names that contain slashes (“/”)

Amazon S3 – Objects (cont.)
• Object values are the content of the body:
	• Max. Object Size is 5TB (5000GB)
	• If uploading more than 5GB, must use “multi-part upload”
• Metadata (list of text key / value pairs – system or user metadata)
• Tags (Unicode key / value pair – up to 10) – useful for security / lifecycle
• Version ID (if versioning is enabled)

Amazon S3 – Security
• User-Based
	• IAM Policies – which API calls should be allowed for a specific user from IAM
• Resource-Based
	• Bucket Policies – bucket wide rules from the S3 console - allows cross account
	• Object Access Control List (ACL) – finer grain (can be disabled)
	• Bucket Access Control List (ACL) – less common (can be disabled)
• Note: an IAM principal can access an S3 object if
	• The user IAM permissions ALLOW it OR the resource policy ALLOWS it
	• AND there’s no explicit DENY
• Encryption: encrypt objects in Amazon S3 using encryption keys

Amazon S3 – Replication (CRR & SRR)
• Must enable Versioning in source and destination buckets
• Cross-Region Replication (CRR)
• Same-Region Replication (SRR)

• CRR – compliance, lower latency access, replication across accounts
• SRR – log aggregation, live replication between production and test accounts

S3 Storage Classes
• Amazon S3 Standard - General Purpose
• Amazon S3 Standard-Infrequent Access (IA)
• Amazon S3 One Zone-Infrequent Access
• Amazon S3 Glacier Instant Retrieval
• Amazon S3 Glacier Flexible Retrieval
• Amazon S3 Glacier Deep Archive
• Amazon S3 Intelligent Tiering
• Can move between classes manually or using S3 Lifecycle configurations

S3 Durability and Availability
• Durability:
• High durability (99.999999999%, 11 9’s) of objects across multiple AZ
• If you store 10,000,000 objects with Amazon S3, you can on average expect to
incur a loss of a single object once every 10,000 years
• Same for all storage classes
• Availability:
• Measures how readily available a service is
• Varies depending on storage class
• Example: S3 standard has 99.99% availability = not available 53 minutes a year

Shared Responsibility Model for S3
AWS
• Infrastructure (global security, durability, availability, sustain concurrent loss of data in two facilities)
• Configuration and vulnerability analysis
• Compliance validation
User
• S3 Versioning
• S3 Bucket Policies
• S3 Replication Setup
• Logging and Monitoring
• S3 Storage Classes
• Data encryption at rest and in transit

Amazon S3 – Summary
• Buckets vs Objects: global unique name, tied to a region
• S3 security: IAM policy, S3 Bucket Policy (public access), S3 Encryption
• S3 Websites: host a static website on Amazon S3
• S3 Versioning: multiple versions for files, prevent accidental deletes
• S3 Replication: same-region or cross-region, must enable versioning
• S3 Storage Classes: Standard, IA, 1Z-IA, Intelligent, Glacier (Instant, Flexible, Deep)
• Snow Family: import data onto S3 through a physical device, edge computing
• OpsHub: desktop application to manage Snow Family devices
• Storage Gateway: hybrid solution to extend on-premises storage to S3

-------------------------------------------------------------------
Database Section
-------------------------------------------------------------------

Relational Databases

NoSQL Databases
Benefits:
• Flexibility: easy to evolve data model
• Scalability: designed to scale-out by using distributed clusters
• High-performance: optimized for a specific data model
• Highly functional: types optimized for the data model
NoSQL data example: JSON = JavaScript Object Notation

Databases & Shared Responsibility on AWS
AWS
• Quick Provisioning, High Availability, Vertical and Horizontal Scaling
• Automated Backup & Restore, Operations, Upgrades
• Operating System Patching is handled by AWS
• Monitoring, alerting

User
the resiliency, backup, patching, high availability, fault tolerance, scaling…

AWS RDS (Relational Database Service) Overview 
• Postgres
• MySQL
• MariaDB
• Oracle
• Microsoft SQL Server
• Aurora (AWS Proprietary database)

RDS is a managed service:
• Automated provisioning, OS patching
• Continuous backups and restore to specific timestamp (Point in Time Restore)!
• Monitoring dashboards
• Read replicas for improved read performance
• Multi AZ setup for DR (Disaster Recovery)
• Maintenance windows for upgrades
• Scaling capability (vertical and horizontal)
• Storage backed by EBS (gp2 or io1)
Amazon Aurora
PostgreSQL and MySQL are both supported as Aurora DB
Amazon Aurora Serverless
Least management overhead

Read Replicas:
• Scale the read workload of your DB
• Can create up to 5 Read Replicas
• Data is only written to the main DB
Multi-AZ:
• Failover in case of AZ outage (high availability)
• Data is only read/written to the main database
• Can only have 1 other AZ as failover

Amazon ElastiCache
• ElastiCache is to get managed Redis or Memcached
• Caches are in-memory databases with high performance, low latency
• Helps reduce load off databases for read intensive workloads

DynamoDB
• Fully Managed Highly available with replication across 3 AZ
• NoSQL database - not a relational database
• Scales to massive workloads, distributed “serverless” database
• Millions of requests per seconds, trillions of row, 100s of TB of storage
• Fast and consistent in performance
• Single-digit millisecond latency – low latency retrieval
• Integrated with IAM for security, authorization and administration
• Low cost and auto scaling capabilities
• Standard & Infrequent Access (IA) Table Class

DynamoDB – type of data
• DynamoDB is a key/value database

DynamoDB Accelerator - DAX
• Fully Managed in-memory cache for DynamoDB
• singledigit millisecond to microseconds latency – when accessing your DynamoDB tables
• Secure, highly scalable & highly available
• DAX is only used for and is integrated with DynamoDB, ElastiCache can be used for other databases

DynamoDB – Global Tables
• Make a DynamoDB table accessible with low latency in multiple-regions
• Active-Active replication (read/write to any AWS Region)

Redshift Overview
• Redshift is based on PostgreSQL, but it’s not used for OLTP
• It’s OLAP – online analytical processing (analytics and data warehousing)
• Load data once every hour, not every second
• 10x better performance than other data warehouses, scale to PBs of data
• Columnar storage of data (instead of row based)
• Massively Parallel Query Execution (MPP), highly available
• Pay as you go based on the instances provisioned
• Has a SQL interface for performing the queries
• BI tools such as AWS Quicksight or Tableau integrate with it

Redshift Overview Serverless

Amazon EMR
• EMR stands for “Elastic MapReduce”
• EMR helps creating Hadoop clusters (Big Data) to analyze and process vast amount of data
• The clusters can be made of hundreds of EC2 instances
• Also supports Apache Spark, HBase, Presto, Flink…
• EMR takes care of all the provisioning and configuration
• Auto-scaling and integrated with Spot instances
• Use cases: data processing, machine learning, web indexing, big data…

Amazon Athena
• Serverless query service to analyze data stored in Amazon S3
• Uses standard SQL language to query the files
• Supports CSV, JSON, ORC, Avro, and Parquet (built on Presto)
• Pricing: $5.00 per TB of data scanned
• Use compressed or columnar data for cost-savings (less scan)
• Use cases: Business intelligence / analytics / reporting, analyze & query VPC Flow Logs, ELB Logs, CloudTrail trails, etc...
• Exam Tip: analyze data in S3 using serverless SQL, use Athena

Amazon QuickSight
• Serverless machine learning-powered business intelligence service to create interactive dashboards
• Fast, automatically scalable, embeddable, with per-session pricing
• Use cases:
• Business analytics
• Building visualizations
• Perform ad-hoc analysis
• Get business insights using data
• Integrated with RDS, Aurora, Athena, Redshift, S3…

DocumentDB
• Aurora is an “AWS-implementation” of PostgreSQL / MySQL …
• DocumentDB is the same for MongoDB (which is a NoSQL database)
• MongoDB is used to store, query, and index JSON data
• Similar “deployment concepts” as Aurora
• Fully Managed, highly available with replication across 3 AZ
• DocumentDB storage automatically grows in increments of 10GB, up to 64 TB.
• Automatically scales to workloads with millions of requests per seconds

Amazon Neptune
• Fully managed graph database
• A popular graph dataset would be a social network
• Users have friends
• Posts have comments
• Comments have likes from users
• Users share and like posts…
• Highly available across 3 AZ, with up to 15 read replicas
• Build and run applications working with highly connected datasets – optimized for these complex and hard queries
• Can store up to billions of relations and query the graph with milliseconds latency
• Highly available with replications across multiple AZs
• Great for knowledge graphs (Wikipedia), fraud detection, recommendation engines, social networking

Amazon QLDB
• QLDB stands for ”Quantum Ledger Database”
• A ledger is a book recording financial transactions
• Fully Managed, Serverless, High available, Replication across 3 AZ
• Used to review history of all the changes made to your application data over time
• Immutable system: no entry can be removed or modified, cryptographically verifiable
• 2-3x better performance than common ledger blockchain frameworks, manipulate data using SQL
• Difference with Amazon Managed Blockchain: no decentralization component, in accordance with financial regulation rules

Amazon Managed Blockchain
• Blockchain makes it possible to build applications where multiple parties can execute transactions without the need for a trusted, central authority.
• Amazon Managed Blockchain is a managed service to:
• Join public blockchain networks
• Or create your own scalable private network
• Compatible with the frameworks Hyperledger Fabric & Ethereum

AWS Glue
• Managed extract, transform, and load (ETL) service
• Useful to prepare and transform data for analytics
• Fully serverless service

• Glue Data Catalog: catalog of datasets
• can be used by Athena, Redshift, EMR

DMS – Database Migration Service
• Quickly and securely migrate databases to AWS, resilient, self healing
• The source database remains available during the migration
• Supports:
	• Homogeneous migrations: ex Oracle to Oracle
	• Heterogeneous migrations: ex Microsoft SQL Server to Aurora
	
Databases & Analytics Summary in AWS
• Relational Databases - OLTP: RDS & Aurora (SQL)
• Differences between Multi-AZ, Read Replicas, Multi-Region
• In-memory Database: ElastiCache
• Key/Value Database: DynamoDB (serverless) & DAX (cache for DynamoDB)
• Warehouse - OLAP: Redshift (SQL)
• Hadoop Cluster: EMR
• Athena: query data on Amazon S3 (serverless & SQL)
• QuickSight: dashboards on your data (serverless)
• DocumentDB: “Aurora for MongoDB” (JSON – NoSQL database)
• Amazon QLDB: Financial Transactions Ledger (immutable journal, cryptographically verifiable)
• Amazon Managed Blockchain: managed Hyperledger Fabric & Ethereum blockchains
• Glue: Managed ETL (Extract Transform Load) and Data Catalog service
• Database Migration: DMS
• Neptune: graph database

-------------------------------------------------------------------
Other Compute Section
-------------------------------------------------------------------

• Docker is a software development platform to deploy apps
• Apps are packaged in containers that can be run on any OS
• Apps run the same, regardless of where they’re run
• Any machine
• No compatibility issues
• Predictable behavior
• Less work
• Easier to maintain and deploy
• Works with any language, any OS, any technology
• Scale containers up and down very quickly (seconds)

• Docker images are stored in Docker Repositories
• Public: Docker Hub https://hub.docker.com/
• Find base images for many technologies or OS:
• Ubuntu
• MySQL
• NodeJS, Java…
• Private: Amazon ECR (Elastic Container Registry)

ECS
• ECS = Elastic Container Service
• Launch Docker containers on AWS
• You must provision & maintain the infrastructure (the EC2 instances)
• AWS takes care of starting / stopping containers
• Has integrations with the Application Load Balancer

Fargate
• Launch Docker containers on AWS
• You do not provision the infrastructure (no EC2 instances to manage) – simpler!
• Serverless offering
• AWS just runs containers for you based on the CPU / RAM you need

ECR
• Elastic Container Registry
• Private Docker Registry on AWS
• This is where you store your Docker images so they can be run by ECS or Fargate

Amazon EKS
• EKS = Elastic Kubernetes Service
• Allows you to launch managed Kubernetes clusters on AWS
• Kubernetes is an open-source system for management, deployment, and scaling of containerized apps (Docker)
• Containers can be hosted on:
	• EC2 instances
	• Fargate (Serverless)
• Kubernetes is cloud-agnostic (can be used in any cloud – Azure, GCP…)

What’s serverless?
• Serverless is a new paradigm in which the developers don’t have to manage servers anymore…
• They just deploy code
• They just deploy… functions !
• Initially... Serverless == FaaS (Function as a Service)
• Serverless was pioneered by AWS Lambda but now also includes anything that’s managed: “databases, messaging, storage, etc.”
• Serverless does not mean there are no servers… it means you just don’t manage / provision / see them

Amazon EC2
• Virtual Servers in the Cloud
• Limited by RAM and CPU
• Continuously running
• Scaling means intervention to add / remove servers
Amazon Lambda
• Virtual functions – no servers to manage!
• Limited by time - short executions
• Run on-demand
• Scaling is automated!

Benefits of AWS Lambda
• Easy Pricing:
	• Pay per request and compute time
	• Free tier of 1,000,000 AWS Lambda requests and 400,000 GBs of compute time
• Integrated with the whole AWS suite of services
• Event-Driven: functions get invoked by AWS when needed
• Integrated with many programming languages
• Easy monitoring through AWS CloudWatch
• Easy to get more resources per functions (up to 10GB of RAM!)
• Increasing RAM will also improve CPU and network!

AWS Lambda language support
• Node.js (JavaScript)
• Python
• Java
• C# (.NET Core) / Powershell
• Ruby
• Custom Runtime API (community supported, example Rust or Golang)
• Lambda Container Image
	• The container image must implement the Lambda Runtime API
	• ECS / Fargate is preferred for running arbitrary Docker images

Amazon API Gateway
• Fully managed service for developers to easily create, publish, maintain, monitor, and secure APIs
• Serverless and scalable
• Supports RESTful APIs and WebSocket APIs
• Support for security, user authentication, API throttling, API keys, monitoring...

AWS Batch
• Fully managed batch processing at any scale
• Efficiently run 100,000s of computing batch jobs on AWS
• A “batch” job is a job with a start and an end (opposed to continuous)
• Batch will dynamically launch EC2 instances or Spot Instances
• AWS Batch provisions the right amount of compute / memory
• You submit or schedule batch jobs and AWS Batch does the rest!
• Batch jobs are defined as Docker images and run on ECS
• Helpful for cost optimizations and focusing less on the infrastructure

Batch vs Lambda
• Lambda:
	• Time limit
	• Limited runtimes
	• Limited temporary disk space
	• Serverless
• Batch:
	• No time limit
	• Any runtime as long as it’s packaged as a Docker image
	• Rely on EBS / instance store for disk space
	• Relies on EC2 (can be managed by AWS)
	
Amazon Lightsail
• Virtual servers, storage, databases, and networking
• Low & predictable pricing
• Simpler alternative to using EC2, RDS, ELB, EBS, Route 53…
• Great for people with little cloud experience!
• Can setup notifications and monitoring of your Lightsail resources
• Use cases:
	• Simple web applications (has templates for LAMP, Nginx, MEAN, Node.js…)
	• Websites (templates for WordPress, Magento, Plesk, Joomla)
	• Dev / Test environment
• Has high availability but no auto-scaling, limited AWS integrations

Other Compute - Summary
• Docker: container technology to run applications
• ECS: run Docker containers on EC2 instances
• Fargate:
	• Run Docker containers without provisioning the infrastructure
	• Serverless offering (no EC2 instances)
• ECR: Private Docker Images Repository
• Batch: run batch jobs on AWS across managed EC2 instances
• Lightsail: predictable & low pricing for simple application & DB stacks

Lambda Summary
• Lambda is Serverless, Function as a Service, seamless scaling, reactive
• Lambda Billing:
	• By the time run x by the RAM provisioned
	• By the number of invocations
• Language Support: many programming languages except (arbitrary) Docker
• Invocation time: up to 15 minutes
• Use cases:
	• Create Thumbnails for images uploaded onto S3
	• Run a Serverless cron job
• API Gateway: expose Lambda functions as HTTP API

-------------------------------------------------------------------
Deploying and Managing Infrastructure at Scale Section
-------------------------------------------------------------------
CloudFormation is a declarative way of outlining your AWS `Infrastructure, for any resources (most of them are supported).
• For example, within a CloudFormation template, you say:
	• I want a security group
	• I want two EC2 instances using this security group
	• I want an S3 bucket
	• I want a load balancer (ELB) in front of these machines
	• Then CloudFormation creates those for you, in the right order, with the exact configuration that you specify
	
Benefits of AWS CloudFormation
• Infrastructure as code
	• No resources are manually created, which is excellent for control
	• Changes to the infrastructure are reviewed through code
• Cost
	• Each resources within the stack is tagged with an identifier so you can easily see how much a stack costs you
	• You can estimate the costs of your resources using the CloudFormation template
	• Savings strategy: In Dev, you could automation deletion of templates at 5 PM and recreated at 8 AM, safely
• Productivity
	• Ability to destroy and re-create an infrastructure on the cloud on the fly
	• Automated generation of Diagram for your templates!
	• Declarative programming (no need to figure out ordering and orchestration)
• Don’t re-invent the wheel
	• Leverage existing templates on the web!
	• Leverage the documentation
• Supports (almost) all AWS resources:
	• Everything we’ll see in this course is supported
	• You can use “custom resources” for resources that are not supported

AWS Cloud Development Kit (CDK)
• Define your cloud infrastructure using a familiar language:
• JavaScript/TypeScript, Python, Java, and .NET
• The code is “compiled” into a CloudFormation template (JSON/YAML)
• You can therefore deploy infrastructure and application runtime code together
	• Great for Lambda functions
	• Great for Docker containers in ECS / EKS

AWS Elastic Beanstalk Overview
• Elastic Beanstalk is a developer centric view of deploying an application on AWS
• It uses all the component’s we’ve seen before: EC2, ASG, ELB, RDS, etc…
• But it’s all in one view that’s easy to make sense of!
• We still have full control over the configuration
• Beanstalk = Platform as a Service (PaaS)

• Managed service
	• Instance configuration / OS is handled by Beanstalk
	• Deployment strategy is configurable but performed by Elastic Beanstalk
	• Capacity provisioning
	• Load balancing & auto-scaling
	• Application health-monitoring & responsiveness
• Just the application code is the responsibility of the developer
• Three architecture models:
	• Single Instance deployment: good for dev
	• LB + ASG: great for production or pre-production web applications
	• ASG only: great for non-web apps in production (workers, etc..)

• Support for many platforms:
	• Go
	• Java SE
	• Java with Tomcat
	• .NET on Windows Server with IIS
	• Node.js
	• PHP
	• Python
	• Ruby
	• Packer Builder
	• Single Container Docker
	• Multi-Container Docker
	• Preconfigured Docker

AWS CodeDeploy
• We want to deploy our application automatically
• Works with EC2 Instances
• Works with On-Premises Servers
• Hybrid service
• Servers / Instances must be provisioned and configured ahead of time with the CodeDeploy Agent

AWS CodeBuild
• Code building service in the cloud (name is obvious)
• Compiles source code, run tests, and produces packages that are ready to be deployed (by CodeDeploy for example)
• Benefits:
	• Fully managed, serverless
	• Continuously scalable & highly available
	• Secure
	• Pay-as-you-go pricing – only pay for the build time
	
AWS CodePipeline
• Orchestrate the different steps to have the code automatically pushed to production
	• Code => Build => Test => Provision => Deploy
	• Basis for CICD (Continuous Integration & Continuous Delivery)
• Benefits:
	• Fully managed, compatible with CodeCommit, CodeBuild, CodeDeploy, Elastic Beanstalk, CloudFormation, GitHub, 3rd-party services (GitHub…) & custom plugins…
	• Fast delivery & rapid updates
	
AWS CodeArtifact
• Software packages depend on each other to be built (also called code dependencies), and new ones are created
• Storing and retrieving these dependencies is called artifact management
• Traditionally you need to setup your own artifact management system
• CodeArtifact is a secure, scalable, and cost-effective artifact management for software development
• Works with common dependency management tools such as Maven, Gradle, npm, yarn, twine, pip, and NuGet
• Developers and CodeBuild can then retrieve dependencies straight from CodeArtifact

AWS Systems Manager (SSM)
• Helps you manage your EC2 and On-Premises systems at scale
• Another Hybrid AWS service
• Get operational insights about the state of your infrastructure
• Suite of 10+ products
• Most important features are:
	• Patching automation for enhanced compliance
	• Run commands across an entire fleet of servers
	• Store parameter configuration with the SSM Parameter Store
• Works for Linux, Windows, MacOS, and Raspberry Pi OS (Raspbian)

How Systems Manager works
• We need to install the SSM agent onto the systems we control
• Installed by default on Amazon Linux AMI & some Ubuntu AMI
• If an instance can’t be controlled with SSM, it’s probably an issue with the SSM agent!
• Thanks to the SSM agent, we can run commands, patch & configure our servers

Systems Manager – SSM Session Manager
• Allows you to start a secure shell on your EC2 and on-premises servers
• No SSH access, bastion hosts, or SSH keys needed
• No port 22 needed (better security)
• Supports Linux, macOS, and Windows
• Send session log data to S3 or CloudWatch Logs

Systems Manager Parameter Store
• Secure storage for configuration and secrets
• API Keys, passwords, configurations…
• Serverless, scalable, durable, easy SDK
• Control access permissions using IAM
• Version tracking & encryption (optional)


Deployment - Summary
• CloudFormation: (AWS only)
	• Infrastructure as Code, works with almost all of AWS resources
	• Repeat across Regions & Accounts
• Beanstalk: (AWS only)
	• Platform as a Service (PaaS), limited to certain programming languages or Docker
	• Deploy code consistently with a known architecture: ex, ALB + EC2 + RDS
• CodeDeploy (hybrid): deploy & upgrade any application onto servers
• Systems Manager (hybrid): patch, configure and run commands at scale

Developer Services - Summary
• CodeCommit: Store code in private git repository (version controlled)
• CodeBuild: Build & test code in AWS
• CodeDeploy: Deploy code onto servers
• CodePipeline: Orchestration of pipeline (from code to build to deploy)
• CodeArtifact: Store software packages / dependencies on AWS
• AWS CDK: Define your cloud infrastructure using a programming language
-------------------------------------------------------------------
Other Compute Section
-------------------------------------------------------------------

-------------------------------------------------------------------
Other Compute Section
-------------------------------------------------------------------